# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import kimchi_grpc_server.kimchi_pb2 as kimchi__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in kimchi_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class KimchiAppStub(object):
    """Methods to communicate from the Kimchi App to the kimchi robot.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IsAlive = channel.unary_unary(
                '/kimchi.KimchiApp/IsAlive',
                request_serializer=kimchi__pb2.Empty.SerializeToString,
                response_deserializer=kimchi__pb2.IsAliveResponse.FromString,
                _registered_method=True)
        self.Move = channel.stream_unary(
                '/kimchi.KimchiApp/Move',
                request_serializer=kimchi__pb2.Velocity.SerializeToString,
                response_deserializer=kimchi__pb2.Empty.FromString,
                _registered_method=True)
        self.GetMap = channel.unary_unary(
                '/kimchi.KimchiApp/GetMap',
                request_serializer=kimchi__pb2.Empty.SerializeToString,
                response_deserializer=kimchi__pb2.Map.FromString,
                _registered_method=True)
        self.GetRobotState = channel.unary_unary(
                '/kimchi.KimchiApp/GetRobotState',
                request_serializer=kimchi__pb2.Empty.SerializeToString,
                response_deserializer=kimchi__pb2.RobotStateMsg.FromString,
                _registered_method=True)
        self.StartMapping = channel.unary_unary(
                '/kimchi.KimchiApp/StartMapping',
                request_serializer=kimchi__pb2.Empty.SerializeToString,
                response_deserializer=kimchi__pb2.StartMappingResponse.FromString,
                _registered_method=True)
        self.StartNavigation = channel.unary_unary(
                '/kimchi.KimchiApp/StartNavigation',
                request_serializer=kimchi__pb2.Empty.SerializeToString,
                response_deserializer=kimchi__pb2.StartNavigationResponse.FromString,
                _registered_method=True)
        self.SubscribeToMap = channel.unary_stream(
                '/kimchi.KimchiApp/SubscribeToMap',
                request_serializer=kimchi__pb2.Empty.SerializeToString,
                response_deserializer=kimchi__pb2.Map.FromString,
                _registered_method=True)
        self.SubscribeToRobotState = channel.unary_stream(
                '/kimchi.KimchiApp/SubscribeToRobotState',
                request_serializer=kimchi__pb2.Empty.SerializeToString,
                response_deserializer=kimchi__pb2.RobotStateMsg.FromString,
                _registered_method=True)
        self.GetPose = channel.unary_stream(
                '/kimchi.KimchiApp/GetPose',
                request_serializer=kimchi__pb2.Empty.SerializeToString,
                response_deserializer=kimchi__pb2.Pose.FromString,
                _registered_method=True)


class KimchiAppServicer(object):
    """Methods to communicate from the Kimchi App to the kimchi robot.
    """

    def IsAlive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Move(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRobotState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartNavigation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToMap(self, request, context):
        """Stream subscriptions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToRobotState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KimchiAppServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IsAlive': grpc.unary_unary_rpc_method_handler(
                    servicer.IsAlive,
                    request_deserializer=kimchi__pb2.Empty.FromString,
                    response_serializer=kimchi__pb2.IsAliveResponse.SerializeToString,
            ),
            'Move': grpc.stream_unary_rpc_method_handler(
                    servicer.Move,
                    request_deserializer=kimchi__pb2.Velocity.FromString,
                    response_serializer=kimchi__pb2.Empty.SerializeToString,
            ),
            'GetMap': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMap,
                    request_deserializer=kimchi__pb2.Empty.FromString,
                    response_serializer=kimchi__pb2.Map.SerializeToString,
            ),
            'GetRobotState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRobotState,
                    request_deserializer=kimchi__pb2.Empty.FromString,
                    response_serializer=kimchi__pb2.RobotStateMsg.SerializeToString,
            ),
            'StartMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.StartMapping,
                    request_deserializer=kimchi__pb2.Empty.FromString,
                    response_serializer=kimchi__pb2.StartMappingResponse.SerializeToString,
            ),
            'StartNavigation': grpc.unary_unary_rpc_method_handler(
                    servicer.StartNavigation,
                    request_deserializer=kimchi__pb2.Empty.FromString,
                    response_serializer=kimchi__pb2.StartNavigationResponse.SerializeToString,
            ),
            'SubscribeToMap': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToMap,
                    request_deserializer=kimchi__pb2.Empty.FromString,
                    response_serializer=kimchi__pb2.Map.SerializeToString,
            ),
            'SubscribeToRobotState': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToRobotState,
                    request_deserializer=kimchi__pb2.Empty.FromString,
                    response_serializer=kimchi__pb2.RobotStateMsg.SerializeToString,
            ),
            'GetPose': grpc.unary_stream_rpc_method_handler(
                    servicer.GetPose,
                    request_deserializer=kimchi__pb2.Empty.FromString,
                    response_serializer=kimchi__pb2.Pose.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kimchi.KimchiApp', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('kimchi.KimchiApp', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class KimchiApp(object):
    """Methods to communicate from the Kimchi App to the kimchi robot.
    """

    @staticmethod
    def IsAlive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kimchi.KimchiApp/IsAlive',
            kimchi__pb2.Empty.SerializeToString,
            kimchi__pb2.IsAliveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Move(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/kimchi.KimchiApp/Move',
            kimchi__pb2.Velocity.SerializeToString,
            kimchi__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kimchi.KimchiApp/GetMap',
            kimchi__pb2.Empty.SerializeToString,
            kimchi__pb2.Map.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRobotState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kimchi.KimchiApp/GetRobotState',
            kimchi__pb2.Empty.SerializeToString,
            kimchi__pb2.RobotStateMsg.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kimchi.KimchiApp/StartMapping',
            kimchi__pb2.Empty.SerializeToString,
            kimchi__pb2.StartMappingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartNavigation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kimchi.KimchiApp/StartNavigation',
            kimchi__pb2.Empty.SerializeToString,
            kimchi__pb2.StartNavigationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/kimchi.KimchiApp/SubscribeToMap',
            kimchi__pb2.Empty.SerializeToString,
            kimchi__pb2.Map.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToRobotState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/kimchi.KimchiApp/SubscribeToRobotState',
            kimchi__pb2.Empty.SerializeToString,
            kimchi__pb2.RobotStateMsg.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/kimchi.KimchiApp/GetPose',
            kimchi__pb2.Empty.SerializeToString,
            kimchi__pb2.Pose.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
