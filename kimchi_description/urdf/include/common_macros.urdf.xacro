<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">


<!-- ===================== Wheel xacro =========================================

  params:
  - prefix [string]: used to differentiate the link and joint name;
  - reflect [1/-1]: value to set the side of the wheel;
  - wheel_props [dictionary]: wheel properties;
  - base_props [dictionary]: base link properties;
  - mesh [string]: file name of the wheel mesh;
    - DEFAULT Value -> Empty string
-->
  <xacro:macro name="wheel"
               params="prefix reflect wheel_props base_props ">

  <xacro:property name="pos_x_joint"
     value="${(base_props['base']['x_size']/2) - wheel_props['x_offset']}"/>
  <xacro:property name="pos_y_joint"
    value="${(base_props['base']['y_size']/2) + wheel_props['y_offset'] + (wheel_props['length']/2)}"/>
  <xacro:property name="pos_z_joint" value="${wheel_props['z_offset']}"/>

    <link name="${prefix}_wheel">
    <xacro:if value="${wheel_props['mesh'] != '' }" >
      <visual>
        <origin xyz="0.0 0 0" rpy="${pi/2} 0 ${pi/2.0*(reflect - 1)}"/>
        <geometry>
          <xacro:if value="${wheel_props['scale'] == '' }" >
            <mesh filename="package://kimchi_description/meshes/${robot_name}/${wheel_props['mesh']}" />
          </xacro:if>
          <xacro:unless value="${wheel_props['scale'] == '' }" >
            <mesh filename="package://kimchi_description/meshes/${robot_name}/${wheel_props['mesh']}" scale="${wheel_props['scale']}" />
          </xacro:unless>
        </geometry>
        <material name="dark_grey"/>
      </visual>
    </xacro:if>
    <xacro:if value="${wheel_props['mesh'] == '' }" >
      <visual>
        <origin xyz="0.0 0 0" rpy="${pi/2} 0 0"/>
         <geometry>
         <cylinder radius="${wheel_props['radius']}" length="${wheel_props['length']}"/>
        </geometry>
        <material name="red"/>
      </visual>
    </xacro:if>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_props['radius']}" length="${wheel_props['length']}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="${wheel_props['mass']}"
                              r="${wheel_props['radius']}"
                              l="${wheel_props['length']}"
                              o_xyz="0.0 0.0 0.0"
                              o_rpy="${pi/2.0} 0.0 0.0" >
      </xacro:cylinder_inertia>
    </link>


    <joint name="${prefix}_wheel_joint" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${prefix}_wheel"/>
      <origin xyz="${pos_x_joint} ${reflect* pos_y_joint} ${pos_z_joint}" rpy="0 0 0"/>
      <dynamics damping="0.01" friction="0.0"/>
    </joint>

  </xacro:macro>

<!-- ===================== Base xacro ==========================================

  params:
  - link_name [string]: link name;
  - base_props [dictionary]: base link properties;
  - mesh [string]: file name of the link mesh;
    - DEFAULT Value -> Empty string
  - origin [block]: origin, position and orientation of the link;
-->
  <xacro:macro name="base"
               params="link_name:='base_link' base_prop mesh:='' scale:='' *origin ">
    <link name="${link_name}">
    <xacro:box_inertia m="${base_prop['base']['mass']}"
                       x="${base_prop['base']['x_size']}"
                       y="${base_prop['base']['y_size']}"
                       z="${base_prop['base']['z_size']}"> 
    </xacro:box_inertia>
    <xacro:if value="${mesh != '' }" >
      <visual>
        <xacro:insert_block name="origin" />
        <geometry>
          <!-- The folder path get a folder_name global parameter -->
          <xacro:if value="${scale != '' }" >
            <mesh filename="package://kimchi_description/meshes/${robot_name}/${mesh}" scale="${scale}"/>
          </xacro:if>
          <xacro:if value="${scale == '' }" >
            <mesh filename="package://kimchi_description/meshes/${robot_name}/${mesh}" />
          </xacro:if>
        </geometry>
        <material name="blue" />
      </visual>
      <collision>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
        <geometry>
          <xacro:if value="${scale != '' }" >
            <mesh filename="package://kimchi_description/meshes/${robot_name}/${mesh}" scale="${scale}"/>
          </xacro:if>
          <xacro:if value="${scale == '' }" >
            <mesh filename="package://kimchi_description/meshes/${robot_name}/${mesh}" />
          </xacro:if>
        </geometry>
      </collision>
    </xacro:if>
    <xacro:if value="${mesh == '' }" >
      <visual>
        <xacro:insert_block name="origin" />
        <geometry>
          <box size="${base_prop['base']['x_size']} ${base_prop['base']['y_size']} ${base_prop['base']['z_size']}"/>
        </geometry>
        <material name="blue" />
      </visual>
    <collision>
      <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
      <geometry>
        <box size="${base_prop['base']['x_size']} ${base_prop['base']['y_size']} ${base_prop['base']['z_size']}"/>
      </geometry>
    </collision>
    </xacro:if>
    </link>
  </xacro:macro>

<!-- ===================== Footprint xacro ==========================================

  params:
  - base_props [dictionary]: base link properties;
  - mesh [string]: file name of the link mesh;
    - DEFAULT Value -> Empty string
  - origin [block]: origin, position and orientation of the link;
-->
  <xacro:macro name="footprint"
               params="wheel_props">
    <!-- Base-Footprint -->
    <!-- base_footprint is a fictitious link(frame) that is on the ground right below base_link origin -->
    <link name="base_footprint" />

    <!-- Joint to connect base_footprint with base_link -->
    <joint name="base_footprint_joint" type="fixed">
      <parent link="base_link"/>
      <child link="base_footprint" />
      <origin xyz="0 0 ${-(wheel_props['radius'] - wheel_props['z_offset'])}" rpy="0 0 0" />
    </joint>
  </xacro:macro>
<!-- ======================================================================= -->

<!-- ======================= Inertial macros ===============================-->
<!-- ===================== Cylinder inertia xacro =============================

  params:
  - m [float]: link mass;
  - r [float]: cylinder radius;
  - l [float]: cylinder lenght (height);
-->
  <xacro:macro name="cylinder_inertia" params="m r l o_xyz:='0.0 0.0 0.0' o_rpy:='0.0 0.0 0.0'">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m*(3*r*r+l*l)/12}" ixy = "0" ixz = "0" 
               iyy="${m*(3*r*r+l*l)/12}" iyz = "0" izz="${m*r*r/2}"/>
      <origin xyz="${o_xyz}" rpy="${o_rpy}" />
    </inertial>
  </xacro:macro>

<!-- ===================== Box inertia xacro ==================================

  params:
  - m [float]: link mass;
  - x [float]: link dimension on the X-axis;
  - y [float]: link dimension on the Y-axis;
  - z [float]: link dimension on the Z-axis;
-->
 <xacro:macro name="box_inertia" params="m x y z o_xyz:='0.0 0.0 0.0' o_rpy:='0.0 0.0 0.0'">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m / 12.0 * (y*y + z*z)}" ixy="0.0" ixz="0.0"
               iyy="${m / 12.0 * (x*x + z*z)}" iyz="0.0" 
               izz="${m / 12.0 * (x*x + y*y)}"/>
      <origin xyz="${o_xyz}" rpy="${o_rpy}" />
    </inertial>
  </xacro:macro>

<!-- ===================== Material ============================================

  RVIZ material RGBA definition.
-->

  <material name="blue">
    <color rgba="0 0 1 1"/>
  </material>
  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <material name="silver">
    <color rgba="0.79 0.82 0.93 1"/>
  </material>
  <material name="dark_grey">
    <color rgba="0.3 0.3 0.3 1"/>
  </material>
<!-- ========================================================================-->

</robot>
